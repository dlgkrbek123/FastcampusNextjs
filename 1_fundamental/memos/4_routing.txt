-------------------------------------------------------

Routing
=> Nextjs에서 디렉토리 기반의 라우팅을 제공
=> Nesting routes를 지원

Dynamic route
=> 와일드카드 지정가능 
 pages/category/[slug].js <=> /category/:slug
 pages/[username]/info.js <=> /:username/info

=> 와일드카드를 마지막 이후 여러 depth로 지정 가능
 pages/cart/[...slug].js <=> /cart/* (/cart/2022/06/24)

=> 다중 슬러그 페이지로 index.js에 대응가능 (optional)
 pages/cart/[[...slug]].js <=> /cart/* (/cart)


router.query를 통해 와일드카드에 접근가능
보통은 문자열, 다중 슬러그는 배열로 전달된다.

명시된 라우트가 다이나믹 라우트보다 우선시
searchQuery와 와일드카드가 겹치는 경우 와일드 카드가 우선시

-------------------------------------------------------

Shallow Routing
=> 한 페이지에 있지만 데이터 페칭은 다시 실행하지는 않지만 url을 바꾸는 방법
=> 동일 path내 이동시에만 유효
=> push 및 replace는 되지만 뒤로가기는 못 막아
=> shallow 옵션을 주거나 props를 true로 설정

-------------------------------------------------------

라우트 이동은 2가지 방법으로 가능하다
1. Link 컴포넌트
 <Link href="/cart/2022/06">
   <a>2022년 6월 5일로</a>
 </Link>


2. useRouter
 const router = useRouter()
 router.push("/cart/2022/06", as, options)

-------------------------------------------------------

API
=> 응용 프로그래밍 인터페이스
=> 프로그램간의 연결을 담당하는 인터페이스

API Routes
=> API 엔드포인트를 nextjs 서버에 구현하게 해주는 기능
  => /pages/api/* 를 통해 구현
  => /api/* 를 통해 fetch
=> Api Routes도 dynamic하게 설정이 가능

=> req객체를 통해 요청에 대한 정보 파악
=> 핸들러에 미들웨어도 적용가능 (cors)
=> res를 통해 요청에 대한 응답

export default function handler(req,res) {
  const { method, cookies, query } = req;

  res.status(200).json({ name: "franky" });
  // res.redirect(307, "/api/user")
  res.send("um")
}

-------------------------------------------------------

// jsconfig.json
{
  "compilerOptions": { 
    "baseUrl": "src", // 절대 경로 설정
  }
}

-------------------------------------------------------