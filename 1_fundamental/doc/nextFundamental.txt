-------------------------------------------------------

Nextjs란
- vercel에서 만든 리액트 프레임워크
- 프론트엔드 개발자들이 가진 고민에 대한 적절한 해결책을 제공

-------------------------------------------------------

- pages밑에 라우트와 연결될 페이지 컴포넌트를 작성!!
- public에 정적 자원을 정의

- dev명령어는 hmr을 제공
- build하고 start명령어 호출시 빌드된 결과물(.next)를 이용해 프로젝트를 실구동

-------------------------------------------------------

Nextjs 프로젝트 띄워보기

!! npx create-next-app nextjs-blog --use-npm --example "https://github.com/vercel/next-learn/tree/master/basics/learn-starter" !!

-------------------------------------------------------

.vscode 디렉토리에 아래의 항목을 지정해 vscode로 개발시 유용한 정보를 제공 가능
- extensions.json => 추천 vscode extensions
- settings.json   => 권장 vscode setting

-------------------------------------------------------

data fetching

- 화면을 그리려면 데이터를 가져와야함
- Nextjs는 4가지 방식을 제공

1. SSR (서버사이드 렌더링)
=> 서버에서 데이터를 가져오고 페이지에 props로 전달
=> getServersideProps


2. CSR
=> 브라우져에서 마운트 된후 데이터를 가져온다.
=> 별도로 방법 제공 x => useEffect


3. SSG
=> 정적인 사이트를 생성              => 빌드시간에 데이터를 결정
=> dev명령어로 확인시 ssr가 동일해보임 => build + start를 통해 확인해야 함
=> 매번 접근시마다 데이터를 새로 가져오면 부하가 크니까 정적인 페이지는 사용 권장
  => getStaticProps (빌드시간에 props를 결정)
  => getStaticPaths (static하게 만들 paths를 정의)


4. ISR
=> 증분 정적 사이트를 재생성
=> 주기적으로 데이터를 가져와서 다시 그려둔다.
  => getStaticProps를 revalidate를 통해 사용

-------------------------------------------------------

- pages 폴더가 url과 매칭
- js, ts, jsx, tsx

- Nextjs는 모든 페이지를 기본적으로 pre-render
  => HTML이 처음에 서버로부터 전달되고
  => 컴포넌트가 로딩되어 Hydration이 이루어져야 인터랙션이 가능
  => Nextjs는 처음에 기본적인 UI의 HTML을 미리내려준다.

- CSR만 제공하면 브라우져와 다르게 동작하는 검색엔진에서 데이터를 조회불가
- pre-render를 해야 브라우져와 다르게 동작하는 검색엔진에게 데이터 제공가능
  => ssr (런타임에 프리렌더) or ssg (빌드타임에 프리렌더)

-------------------------------------------------------

Layouts
- 여러 페이지에서 공통된 레이아웃을 쓰는 경우
- pages/_app.js에서 /components/Layout.js에 children을 제공


- 여러개의 Layouts을 활용하는 경우(분기처리)
 => 1. /components/SubLayout을 정의
 => 2. 필요한 페이지에 getLayout이라는 프로퍼티를 함수로 추가
 => 3. _app에서 Component가 getLayout을 가진 경우에만 적용되게

-------------------------------------------------------

Images
- Nextjs가 제공하는 최적화된 이미지 컴포넌트
- layout, color, 레이지로드 등의 기능을 제공

<Image />

-------------------------------------------------------

Routing
- Nextjs에서 파일시스템기반의 라우팅을 제공한다
- Nesting routes를 지원하므로 폴더를 깊게하여 라우트를 설정가능

- dynamic route
  => 와일드카드를 지정가능
    pages/category/[slug].js <=> /category/:slug
    pages/[username]/info.js <=> /:username/info

  => 와일드카드를 마지막 이후 여러 depth로 지정가능
    pages/cart/[...slug].js <=> /cart/* (/cart/2022/06/24)
  => 다중 슬러그 페이지로 index.js에 대응가능
    pages/cart/[[...slug]].js <=> /cart/* (/cart)

  => router.query를 통해 와일드카드값에 접근가능
  => 다중슬러그는 배열로 전달된다.


=> /pages(우선순위 높음) or /src/pages
=> jsconfig.json에서 절대경로를 설정가능

{
  "compilerOptions": { 
    "baseUrl": "src" 
  }
}

-------------------------------------------------------

- 라우트 이동은 2가지 방법으로 가능하다
  => <Link /> 컴포넌트로 클릭시 특정 라우트로 이동되게 가능
  => router.push()

-------------------------------------------------------

Shallow Routing
- 한 페이지내에 있지만 데이터 페칭은 다시 호출하지는 않지만 url을 바꾸는 방법
- 동일 path내 이동시에만 유효
- push 및 replace는 되지만 뒤로가기는 못 막아

-------------------------------------------------------

Api Routes
- API 엔드포인트를 nextjs 서버에 구현하게 해주는 기능
 => /pages/api/* 를 통해 구현한다.
 => /api/*를 통해 fetch

- Api Routes도 dynamic하게 설정이 가능

- req객체를 통해 요청에 대한 정보를 알 수 있다(method, cookies, query)
- 핸들러에 미들웨어도 적용가능

- res를 통해 요청에 대한 응답

-------------------------------------------------------